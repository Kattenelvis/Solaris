Button: The button view is a clickable region with text. Adjusts its width to the text if width not set. 
- Text: Button text.
- AutoSize: Enum indicating if and how the button should automatically resize itself to the size of the text.
- CanToggleOff: Boolean indicating if the button can be toggled off.
- CanToggleOn: Boolean indicating if the button can be toggled on.
- DefaultWidth: Default width of the button when none is specified.
- IsBackButton: Boolean indicating if this is a back button.
- IsCloseButton: Boolean indicating if this is a close button.
- IsDisabled: Boolean indicating if this button is disabled.
- IsMouseOver: Boolean indicating if the mouse is over the button.
- IsPressed: Boolean indicating if the button is pressed.
- IsToggleButton: Boolean indicating if the button is a toggle button.
- TextOffset: The offset of the button text label.
- TextPadding: Padding applied when the button autosizes to its content.
- ToggleClick: Action called when the button is toggled.
- ToggleValue: Toggle value of the button.
- DisplayLabel: Boolean indicating if the button label should be displayed.

CanvasRenderer: Renders a graphical UI object contained within a Canvas.
- Cull: Indicates whether geometry emitted by the renderer is ignored.
- CullTransparentMesh: Indicates whether geometry emitted by the renderer can be ignored when the vertex color alpha is close to zero for every vertex of the mesh.
- HasPopInstruction: Enable 'render stack' pop draw call.
- MaterialCount: The number of materials usable by this renderer.
- PopMaterialCount: The number of materials usable by this renderer. Used internally for masking.

CheckBox: A check box view consisting of a box that can be ticked and a text label.
- Text: Check box text.
- IsChecked: Boolean indicating if the check box is checked.
- IsDisabled: Boolean indicating if the check box is disabled.
- IsInteractable: Boolean indicating if the user can interact with the check box.
- Spacing: Spacing between the check box sprite and the text label.

Collection: Generic collection view. Used by views such as Lists and TabPanel that wants to display dynamic content through the Item property.
- Items: The data collection that is used to generate the collection view items.
- TemplateSelector: Method used to select the template used by the collection. The method takes the data collection item as a parameter and returns the ID of the template that should be used to present the item.

ComboBox: Presents a static or dynamic list of items in a drop-down.
- IsDropUp: Boolean indicating if the combo box list should open above instead of below the button.
- ItemSelected: Action called when an item is selected.
- ShowSelectedItem: Boolean indicating if the selected item should be shown in the button.

ComboBoxListItem: Base view for items displayed within the ComboBox view.

DelightDesigner: Designer for editing view XML and data models during runtime.
- AutoParse: Boolean indicating if the designer should automatically parse XML of views as they changes.
- ChangedDesignerViews: List of views that has been changed by the designer.
- DesignerViews: List of views that can be edited by the designer.

Expander: Expandable view with a header and content. When header is clicked the view expands to show content or collapses to hide it.
- ContentMargin: Margin of the expanded content.
- HeaderAlignment: Alignment of the expander header.
- HeaderHeight: Height of the expander header.
- IsDisabled: Boolean indicating if the expander button is deisabled.
- IsExpanded: Boolean indicating if content is expanded.
- IsInteractable: Boolean indicating if expander responds to user interaction.
- Sprite: Expander header icon sprite.
- Text: Expander header text.
- ToggleMode: Enum indicating how the content should be toggled, e.g. if content should be loaded on-demand or be pre-loaded.

ExpanderContent: Defines the content of an expander.
- ContentTemplateData: Holds the content template data.

ExpanderHeader: Defines the header of an expander.
- Sprite: Expander header icon sprite.
- Text: Expander header text.

Frame: View that resizes itself to its content by default.
- AutoSizeToContent: Boolean indicating if the view should resize itself to its content.

Grid: View that displays static content in a grid layout.
- Columns: Column definitions that determines the proportional or pixel size of each column in the grid as well as their min/max size.
- ColumnSpacing: Spacing between grid columns.
- Rows: Row definitions that determines the proportional or pixel size of each row in the grid as well as their min/max size.
- RowSpacing: Spacing between grid rows.
- Spacing: Spacing between grid row and columns.
 
GridSplitter: Allows for resizing of columns and rows in the Grid view. 
- BePushy: Boolean indicating if resizing one column/row beyond min/max should push into and resize subsequent rows/columns.
- InteractionThickness: Indicates how thick the interactable region of the splitter handle is. Can be larger than the actual thickness to make it easer for the user to interact with the handle.
- IsEnabled: 
- OverrideProportionalSize: Boolean indicating if the proportional size of the columns/rows should be overriden when resizing, and set to absolute (pixel) sizes instead.
- SetSizeOnDragEnded: Boolean indicating if the size of the row/column should be set after the user releases the handle.
- SplitMode: Sets if the grid should be split by columns, rows or both.
- SplitterColor: Color used by the grid splitter handles.
- SplitterSprite: Sprite used by the grid splitter handles.
- Thickness: The thickness of the grid splitter handles.

GridSplitterHandle: Handle used to resize a rows or column in the Grid view. Created and managed by the GridSplitter view.
- IsEnabled: Boolean indicating if the user can interact with the grid splitter handle.

Group: The group is used to snug views together either horizontally or vertically.
- ContentAlignment: Sets the alignment of the child views within the group.
- Orientation: Sets if the group should arrange its item horizontally or vertically.
- Spacing: The spacing between the horizontally or vertically arranged child views.

Image: View that displays an image sprite. Adjusts its size to the native sprite if not explicitly set.
- AlphaHitTestMinimumThreshold: Alpha values less than the threshold will cause raycast events to pass through the view.
- Color: Color of the image. Color values can be specified by name (Red, Blue, Coral, etc), hexcode (#aarrggbb or #rrggbb) or rgb/rgba value ("1.0,0.0,0.5" or "1,1,1,0.5").
- FillAmount: Amount of the view shown when Type is set to Filled.
- FillCenter: Boolean indicating if the center of a Tiled or Sliced sprite should be rendered.
- FillClockwise: Boolean indicating if the sprite should be filled clockwise or counter-clockwise.
- FillMethod: Enum indicating the background fill method.
- FillOrigin: Point of origin of the Fill process. Value means different things with each fill method.
- IsMaskingGraphic: Boolean indicating if image is a masking graphic.
- Maskable: Boolean indicating if the graphic allows masking.
- Material: Material used by the sprite.
- OnCullStateChanged: Callback called when the culling state of this graphic either becomes culled or visible.
- OverrideSprite: Overrides the default sprite used by this view.
- PixelsPerUnitMultiplier: Pixel per unit modifier to change how sliced sprites are generated.
- PreserveAspect: Boolean indicating if this sprite should preserve its aspect ratio.
- RaycastTarget: Boolean indicating if the graphic should be considered a target for raycasting.
- Sprite: The sprite of the view. The value is the name of the sprite asset file without extension, e.g. "mysprite".
- Type: Enum indicating what type of sprite the background is.
- UseSpriteMesh: Boolean indicating if the view should use mesh generated by TextureImporter or a simple quad mesh.

InputField: Interactable input field enabling user to type single or multi-line text.
- AnimationTriggers: The animation triggers for this selectable object.
- AsteriskChar: Character used for password fields.
- CaretBlinkRate: The blinking rate of the input caret in cycles per second.
- CaretColor: Color of the caret if CustomCaretColor is set.
- CaretPosition: Current InputField caret position (also selection tail).
- CaretWidth: Width of the caret.
- CharacterLimit: How many characters the input field is limited to (0 = infinite).
- CharacterValidation: The type of validation to perform on a character.
- Colors: The ColorBlock for this selectable object.
- ContentType: The type of input expected.
- CustomCaretColor: Boolean indicating if caret color is customized by CaretColor.
- EndEdit: Action called when the user stops editing the input field text.
- FontAsset: Font asset used by input field.
- Image: Convenience function that converts the referenced Graphic to a Image, if possible.
- InputType: Type of input expected.
- InputValidator: Input validator used by the input field.
- Interactable: Boolean indicating if input field is interactable.
- IsRichTextEditingAllowed: Boolean indicating if rich text editing is allowed.
- KeyboardType: Enum indicating touch screen keyboard type.
- LineLimit: How many lines the input field is limited to (0 = infinite).
- LineType: Line type used by the input field.
- Navigation: Navigation settings.
- OnDeselect: Called when input field is deselected.
- OnEndEdit: Called when the user stops editing the input field.
- OnEndTextSelection: Called when text selections ends.
- OnFocusSelectAll: Called when focused and all is selected.
- OnlyTriggerValueChangedFromUI: Boolean indicating if the ValueChanged action only should be called when the user changes the input text and not when it's programmatically changed.
- OnSelect: Called when input field is selected.
- OnSubmit: Called when submit event occurs.
- OnTextSelection: Called when text is selected.
- OnTouchScreenKeyboardStatusChanged: Called when touch screen keyboard status changes.
- OnValidateInput: Called when input is validated.
- OnValueChanged: Called when value is changed.
- Placeholder: Placeholder graphics used by the input field.
- PointSize: Specifies the point size of the input field text.
- ReadOnly: Boolean indicating if the input field is read only.
- ResetOnDeActivation: Boolean indicating if input field is reset on deactivation.
- RestoreOriginalTextOnEscape: Boolean indicating if original text should be restored when user presses escape.
- RichText: Boolean indicating if input is rich text.
- ScrollSensitivity: Indicates the sensitivity of scrolling the input field text.
- SelectionAnchorPosition: Determines the anchor position of selection.
- SelectionColor: Color of the selection.
- SelectionFocusPosition: Selection focus position.
- SelectionStringAnchorPosition: Selection string anchor position.
- SelectionStringFocusPosition: Determines the focus position of the selection string.
- SetValueOnEndEdit: Boolean indicating if the value of the input field text should be set after the user is done editing.
- ShouldHideMobileInput: Boolean indicating if mobile input should be hidden.
- ShouldHideSoftKeyboard: Boolean indicating if soft keyboard should be hidden.
- SpriteState: The sprite state of this selectable object.
- StringPosition: Position of the string.
- TargetGraphic: Graphic that will be transitioned upon.
- Text: Text of the input field.
- TextComponent: Reference to the text component.
- TextMargin: Margin of the input text.
- TextViewport: Reference to the text viewport.
- Transition: The type of transition that will be applied to the targetGraphic when the state changes.
- ValueChanged: Action called when the input text changes.
- VerticalScrollbar: Reference to a vertical scrollbar used by the input field.

Label: View that presents text.
- AutoSize: Enum indicating if and how the label should automatically resize itself to the size of the text.
- AutoSizeTextContainer: Boolean indicating if text container should be resized to text.
- CharacterSpacing: Determines the spacing between characters in the text.
- CharacterWidthAdjustment: Percentage the width of characters can be adjusted before text auto-sizing begins to reduce the point size.
- ColorGradient: Sets the vertex colors for each of the 4 vertices of the character quads.
- ColorGradientPreset: Set the vertex colors of the 4 vertices of each character quads.
- EnableAutoSizing: Enable text auto-sizing.
- EnableCulling: Sets the culling on the shaders. Note changing this value will result in an instance of the material.
- EnableKerning: Determines if kerning is enabled or disabled.
- EnableVertexGradient: Determines if Vertex Color Gradient should be used.
- EnableWordWrapping: Controls whether or not word wrapping is applied. When disabled, the text will be displayed on a single line.
- ExtraPadding: Adds extra padding around each character. This may be necessary when the displayed text is very small to prevent clipping.
- FaceColor: Sets the color of the _FaceColor property of the assigned material. Changing face color will result in an instance of the material.
- FirstVisibleCharacter: The first character which should be made visible in conjunction with the Text Overflow Linked mode.
- Font: The font of the label. The value is the name of the font asset file without extension, e.g. "myfont".
- FontColor: Color of the font.
- FontMaterial: Font material to be used.
- FontMaterials: Font materials to be used.
- FontSharedMaterial: Shared font material.
- FontSharedMaterials: Shared font materials.
- FontSize: The point size of the font.
- FontSizeMax: Maximum point size of the font when text auto-sizing is enabled.
- FontSizeMin: Minimum point size of the font when text auto-sizing is enabled.
- FontStyle: Font style.
- FontWeight: Control the weight of the font if an alternative font asset is assigned for the given weight in the font asset editor.
- GeometrySortingOrder: Determines the sorting order of the geometry of the text object.
- HavePropertiesChanged: Property tracking if any of the text properties have changed. Flag is set before the text is regenerated.
- HorizontalMapping: Controls how the face and outline textures will be applied to the text object.
- IgnoreRectMaskCulling: Controls whether or not the text object will be culled when using a 2D Rect Mask.
- IgnoreVisibility: Forces objects that are not visible to get refreshed.
- IsLinkedTextComponent: Indicates whether this text component is linked to another.
- IsMaskingGraphic: Boolean indicating if this is a masking graphic.
- IsOrthographic: Boolean indicating if this graphic is orthographic.
- IsOverlay: Sets the RenderQueue along with Ztest to force the text to be drawn last and on top of scene elements.
- IsRightToLeftText: Boolean indicating if this text flows from right to left.
- IsUsingLegacyAnimationComponent: Property to handle legacy animation component.
- IsVolumetricText: Determines if the geometry of the characters will be quads or volumetric (cubes).
- LineSpacing: The amount of additional spacing to add between each lines of text.
- LineSpacingAdjustment: The amount of potential line spacing adjustment before text auto sizing kicks in.
- LinkedTextComponent: The linked text component used for flowing the text from one text component to another.
- MappingUvLineOffset: Controls the horizontal offset of the UV of the texture mapping mode for each line of the text object.
- Maskable: Boolean indicating if graphic is maskable.
- MaskOffset: Offset of mask graphics.
- Material: Material used by graphic.
- MaxVisibleCharacters: Allows to control how many characters are visible from the input.
- MaxVisibleLines: Allows control over how many lines of text are displayed.
- MaxVisibleWords: Allows to control how many words are visible from the input.
- MaxWidth: Used when AutoSize is true and extends the label to the maxsize then expands vertically.
- OnCullStateChanged: Called when cull state changes.
- OutlineColor: Sets the _OutlineColor property of the assigned material. Changing outline color will result in an instance of the material.
- OutlineWidth: Sets the thickness of the outline of the font. Setting this value will result in an instance of the material.
- OverflowMode: Controls the text overflow mode.
- OverrideColorTags: This overrides the color tags forcing the vertex colors to be the default font color.
- PageToDisplay: Controls which page of text is shown.
- ParagraphSpacing: The amount of additional spacing to add between each lines of text.
- ParseCtrlCharacters: Enables or Disables parsing of CTRL characters in input text.
- RaycastTarget: Boolean indicating if the graphic should be considered a target for raycasting.
- RenderMode: Determines if the Mesh will be rendered.
- RichText: Enables or disables rich text tags.
- SpriteAsset: Default Sprite Asset used by the text object.
- Text: A string containing the text to be displayed.
- TextAlignment: Determines the alignment of the text.
- TextMargin: Determines the margin of the text.
- TextMeshProUGUIAlpha: Alpha value of the text.
- TintAllSprites: Determines whether or not the sprite color is multiplies by the vertex color of the text.
- UseMaxVisibleDescender: Determines if the text's vertical alignment will be adjusted based on visible descender of the text.
- VertexBufferAutoSizeReduction: Determines if the data structures allocated to contain the geometry of the text object will be reduced in size if the number of characters required to display the text is reduced by more than 256 characters.
- VerticalMapping: Controls how the face and outline textures will be applied to the text object.
- WordSpacing: The amount of additional spacing between words.
- WordWrappingRatios: Controls the blending between using character and word spacing to fill-in the space for justified text.

LayoutRoot: Represents a layout root canvas under which all UI views must reside.

List: The list presents a static or dynamic list of items. Can be set to be scrollable, virtual, flowing, horizontal/vertical, etc.
- AlternateItems: Boolean indicating if the state of every other (odd) list items should be Alternate by default. Used to alternate the style of list items.
- CanDeselect: Boolean indicating if selected list items can be deselected by clicking on them again.
- CanMultiSelect: Boolean indicating if the user can select multiple list items.
- CanReselect: Boolean indicating if the selected item should be reselected if clicked on again.
- CanSelect: Boolean indicating if the user can select items in the list.
- ContentAlignment: Alignment of the list items.
- DeselectAfterSelect: Boolean indicating if the item should immediatelly be deselected after being selected.
- DisableItemArrangement: Boolean indicating if the list shouldn't arrange its items. Used if items are arranged elsewhere.
- HorizontalSpacing: Horizontal spacing between the list items.
- IsPaged: Boolean indicating if the list is paged. Customize paging through, e.g. PageSize and ShowNavigationButtons properties.
- IsScrollable: Boolean indicating if the list can be scrolled.
- IsStatic: Boolean indicating if the list is static.
- IsVirtualized: Boolean indicating if the list is virtualized. Virtualized lists have far better performance when dealing with large number of items as only items visible in the viewport are generated.
- ItemDeselected: Action called when an item is deselected.
- ItemSelected: Action called when an item is selected.
- Orientation: Orientation of the list.
- Overflow: Enum indicating if items should overflow or wrap as they reach the boundaries of the list. Used to create flowing lists.
- Padding: Adds padding to the list.
- PageIndex: Zero-based index of the current page being displayed if IsPaged is set to true. 
- PageNavigationGroupAlignment: Default alignment of page navigation button group.
- PageNavigationGroupOffset: Default offset of page navigation button group.
- PageNavigationGroupOrientation: Default orientation of page navigation button group.
- PageNavigationGroupSpacing: Default spacing of page navigation button group.
- PageSize: Number of items to be shown per page when IsPaged is set to true.
- RealizationMargin: Used when IsVirtualized is set to true and determines how close the list item needs to be to the visible viewport in order to be realized.
- SelectedItem: References the data collection item that corresponds to the currently selected list item.
- SelectOnMouseUp: Boolean indicating if list items should be selected on mouse up.
- ShowNavigationButtons: Enum indicating which navigation buttons should be shown when list is paged. 
- SortDirection: Determines the sort direction of the list items.
- Spacing: Horizontal and vertical spacing between the list items.
- VerticalSpacing: Vertical spacing between the list items.
- VirtualItemGetter: If the list is virtualized and when the size of the virtual items are dynamic, the user can specify a VirtualItemGetter that returns the size of the virtual item that corresponds to the data collection item.

ListItem: Base view for items displayed within the List view.
- AutoSizeToContent: Boolean indicating if the list item automatically audjusts its size to its content.
- Breadth: The breadth of the list item that corresponds to Width if list is horizontal and Height if vertical.
- ContentTemplateData: Holds the content template data.
- IsAlternate: Boolean indicating if the default state of this list item should be Alternate. Used by lists that has AlternateItems set to True, to alternate the style of every other (odd) list item.
- IsDisabled: Boolean indicating if the list item is disabled.
- IsMouseOver: Boolean indicating if the mouse is over the list item.
- IsPressed: Boolean indicating if the list item is pressed.
- IsSelected: Boolean indicating if the list item is selected.
- Item: References the data collection item bound to this list item (set when the list item resides in a dynamic list).
- ItemSelected: Action called when item is selected.
- Length: The length of the list item that corresponds to Height if list is horizontal and Width if vertical.

Mask: A view that masks any content using the background sprite and color as mask.
- ShowMaskGraphic: Show the graphic that is associated with the Mask render area.

NavigationButton: Used to customize the navigation buttons of e.g. paged lists.
- NavigationType: Type of navigation button this button represents.
- PageIndex: Set programmatically to keep track of which page this button navigates to. 

RadioButton: Presents a one-of-many selection option. If multiple radio buttons shares the same parent only one is selected at a time.
- Text: Radio button text. 
- IsChecked: Boolean indicating if the radio button is selected.
- IsDisabled: Boolean indicating if the radio button is disabled.
- IsInteractable: Boolean indicating if the user can toggle the radio button.
- Spacing: The spacing between the radio button image and the label.

RawImage: Similar to the Image view but displays a Texture2D asset.
- Color: Color of the image. Color values can be specified by name (Red, Blue, Coral, etc), hexcode (#aarrggbb or #rrggbb) or rgb/rgba value ("1.0,0.0,0.5" or "1,1,1,0.5").
- IsMaskingGraphic: Boolean indicating if image is a masking graphic.
- Maskable: Boolean indicating if the graphic allows masking.
- Material: Material used by the image.
- OnCullStateChanged: Callback called when the culling state of this graphic either becomes culled or visible.
- RaycastTarget: Boolean indicating if the graphic should be considered a target for raycasting.
- Texture: The texture of the view. The value is the name of the texture asset file without extension, e.g. "mytexture".
- UvRect: The texture coordinates.

RectMask2D: A view that masks any content using the background sprite and color as mask. Based on RectMask2D component which has better performance than the regular mask.

Region: View used primarily to section off a region of space in order to spacially arrange child views. Has 100% size by default.

SceneObjectView: Base class for all views that has a game object in the scene. 
- BeginDrag: Action called when the user begins to drag the view.
- Cancel: Action called when a cancel event occurs.
- Click: Action called when the user clicks on the view.
- Deselect: Action called when another view is selected.
- Drag: Action called while the user drags the view.
- Drop: Action called when the view accepts a drop.
- EnableScriptEvents: Boolean indicating if unity script events (Update, LateUpdate, Awake, etc) should be relayed to the view code-behind through the corresponding methods that can be overriden.
- EndDrag: Action called when the user stops dragging the view.
- GameObject: GameObject in the hierarchy that corresponds to the view.
- IgnoreObject: Boolean indicating if the view should be ignored. Ignored objects don't run any load logic and don't respond to property changed events.
- InitializePotentialDrag: Called when the user initializes a potential drag on the view.
- IsActive: Boolean indicating if the view is active. Deactivated views deactivates corresponding game object, components, renderers and scripts.
- MouseDown: Action called when the mouse/touch presses down over the view.
- MouseEnter: Action called when the mouse enters the view.
- MouseExit: Action called when the mouse exits the view.
- MouseUp: Action called when the mouse/touch releases over the view.
- Move: Action called when a move events occurs.
- Scroll: Action called when the user scrolls with mouse wheel or track pad over the view.
- Select: Action called when the view is selected.
- Submit: Action called when a submit event occurs.
- UpdateSelected: Action called when theobject associated with this EventTrigger is updated.

ScrollableRegion: Presents scrollable content with optional scrollbars. Behaves similar to the UGUI Panel component. 
- AutoSizeContentRegion: Boolean indicating if the scrollable content region should be adjusted to the size of its content or not.
- CanScrollHorizontally: Boolean indicating if the region can be scrolled horizontally.
- CanScrollVertically: Boolean indicating if the region can be scrolled vertically.
- ContentAlignment: Alignment of the content.
- ContentScrolled: Action called whenever the content is scrolled.
- DecelerationRate: Determines how fast the scroll speed decelerates once the user stops scrolling.
- DisableInteractionScrollDelta: If set any interaction with child views (clicks, etc) are disabled when the specified amount of pixels has been scrolled. Used e.g. to disable items from being selected while scrolling a selectable list of items.
- DisableMouseWheel: Boolean indicating if the mouse wheel is disabled.
- Elasticity: Determines how elastic the viewport is when scrolling outside the bounds of the scrollable content.
- HasInertia: Boolean indicating if the should stop immediatelly when the user stops scrolling (when set to False) or if it should decelerate based on DecelerationRate.
- HorizontalScrollbarVisibility: Enum indicating the visibility mode of the horizontal scrollbar.
- MaskContent: Boolean indicating if any content outside the bounds of the viewport should be masked.
- ScrollBounds: Enum indicating what type of bounds the scrollable region has (Clamped, Elastic or None).
- ScrollEnabled: Boolean indicating if scrolling by the user is enabled.
- ScrollSensitivity: Sets the sensitivity of the scrolling using mouse wheel or track pad.
- UnblockDragEventsInChildren: Boolean indicating if draggable child views shouldn't block this scrollable region from being scrolled.
- VerticalScrollbarVisibility: Enum indicating the visibility mode of the vertical scrollbar.

Scrollbar: A scrollbar with a draggable handle. Used by the ScrollableRegion view. 
- Breadth: Breadth of the scrollbar. Corresponds to Height if horizontal and Width if vertical.
- Length: Length of the scrollbar. Corresponds to Width if horizontal and Height if vertical.
- Orientation: The orientation of the scrollbar.
- ScrollPosition: Sets normalized scroll position (0-1 where 0.5 is scrolled half-way).
- ViewportRatio: Value between 0-1 determining the size of the scrollbar handle relative to the viewport.

Slider: Slider with a handle that can be moved with the mouse. Can be oriented horizontally or vertically.
- Breadth: The breadth of the slider. Corresponds to Height if horizontal and Width if vertical.
- CanSlide: Boolean indicating if the user can interact with the slider.
- IsReversed: Boolean indicating if slider direction is reversed.
- Length: The length of the slider. Corresponds to Width if horizontal and Height if vertical.
- Max: Maximum value of the slider.
- Min: Minimum value of the slider.
- Orientation: Orientation of the slider (horizontal or vertical).
- SetValueOnDragEnded: Boolean indicating that the slider value is set when the user releases the handle.
- Steps: Specifies the number of steps there should be between min and max slider value.
- Value: Current value of the slider.
- ValueChanged: Action called when the slider value changes.

Tab: Base view for tab content displayed within the TabPanel.
- ContentTemplateData: Holds the content template data.
- TabHeaderId: ID of TabHeader belonging to this tab.
- Text: Default tab header text.

TabHeader: Base view for tab headers displayed by the TabPanel.
- ContentTemplateData: Holds the content template data.
- TabIndex: Index of the tab.

TabPanel: Arranges content in a series of tabs that can be switched between. 
- IsStatic: Boolean indicating if the tab panel is static.
- SelectedTabIndex: Selected tab index.
- TabHeaderHeight: Default height of tab headers.
- TabHeaderWidth: Default width of tab headers.
- TabSelected: Action called when a tab is selected.
- TabSwitchMode: Enum indicating view switch mode, e.g. if tabs should be loaded on-demand or be pre-loaded.

ToggleGroup: Group view that makes its child buttons into toggle buttons and ensures only one is toggled at a time.

UICanvas: The canvas view is used to render UI components and controls things like draw sort order, scaling and render mode.
- AdditionalShaderChannels: Enum mask of possible shader channel properties that can also be included when the Canvas mesh is created.
- BlockingObjects: Type of objects that will block graphic raycasts.
- CanvasScalerReferencePixelsPerUnit: If a sprite has 'Pixels Per Unit' setting, one pixel in the sprite will cover one unit in the UI.
- CanvasScalerScaleFactor: Scales all children within the canvas by this factor.
- DefaultSpriteDPI: The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting.
- DynamicPixelsPerUnit: The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text.
- FallbackScreenDPI: The DPI to assume if the screen DPI is not known.
- IgnoreReversedGraphics: Boolean indicating if graphics facing away from the raycaster should be ignored.
- MatchWidthOrHeight: Setting to scale the Canvas to match the width or height of the reference resolution, or a combination.
- NormalizedSortingGridSize: The normalized grid size that the canvas will split the renderable area into.
- OverridePixelPerfect: Allows for nested canvases to override pixelPerfect settings inherited from parent canvases.
- OverrideSorting: Override the sorting of canvas.
- PhysicalUnit: The physical unit to specify positions and sizes in.
- PixelPerfect: Force elements in the canvas to be aligned with pixels. Only applies with renderMode is Screen Space.
- PlaneDistance: How far away from the camera is the Canvas generated.
- ReferencePixelsPerUnit: The number of pixels per unit that is considered the default.
- ReferenceResolution: The resolution the UI layout is designed for.
- RenderCamera: ID of the world camera camera used when rendering the canvas.
- RenderMode: Enum indicating if the canvas is in world or overlay mode.
- ScaleFactor: Used to scale the entire canvas, while still making it fit the screen. Only applies with renderMode is Screen Space.
- ScreenMatchMode: A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution.
- SortingLayerID: Unique ID of the Canvas sorting layer.
- SortingLayerName: Name of the Canvas sorting layer.
- SortingOrder: Canvas order within a sorting layer.
- TargetDisplay: For Overlay mode, display index on which the UI canvas will appear.
- UiScaleMode: Determines how UI elements in the Canvas are scaled.
- WorldCamera: Reference to the world camera, is automatically set if RenderCamera is set.

UIImageView: Base class for views that has a background sprite and color. 
- BackgroundAlphaHitTestMinimumThreshold: Alpha values less than the threshold will cause raycast events to pass through the view.
- BackgroundColor: Background color of the view. Color values can be specified by name (Red, Blue, Coral, etc), hexcode (#aarrggbb or #rrggbb) or rgb/rgba value ("1.0,0.0,0.5" or "1,1,1,0.5").
- BackgroundFillAmount: Amount of the view shown when BackgroundType is set to Filled.
- BackgroundFillCenter: Boolean indicating if the center of a Tiled or Sliced sprite should be rendered.
- BackgroundFillClockwise: Boolean indicating if the sprite should be filled clockwise or counter-clockwise.
- BackgroundFillMethod: Enum indicating the background fill method.
- BackgroundFillOrigin: Point of origin of the Fill process. Value means different things with each fill method.
- BackgroundIsMaskingGraphic: Boolean indicating if image is a masking graphic.
- BackgroundMaskable: Boolean indicating if the graphic allows masking.
- BackgroundMaterial: Material used by the sprite.
- BackgroundOnCullStateChanged: Callback called when the culling state of this graphic either becomes culled or visible.
- BackgroundOverrideSprite: Overrides the default sprite used by this view.
- BackgroundPixelsPerUnitMultiplier: Pixel per unit modifier to change how sliced sprites are generated.
- BackgroundPreserveAspect: Boolean indicating if this sprite should preserve its aspect ratio.
- BackgroundRaycastTarget: Boolean indicating if the graphic should be considered a target for raycasting.
- BackgroundSprite: The background sprite of the view. The value is the name of the sprite asset file without extension, e.g. "mysprite".
- BackgroundType: Enum indicating what type of sprite the background is.
- BackgroundUseSpriteMesh: Boolean indicating if the view should use mesh generated by TextureImporter or a simple quad mesh.
- MaskContent: Boolean indicating if content of the view should be masked.

UIView: Base class for UI views. Has properties for doing layout: Width, Height, Margin, Alignment and Offset.
- Alignment: Used to align the view relative to the layout parent region it resides in.
- Alpha: Can be used to adjust the alpha color of this view and all its children. E.g. used for fade in/out animations. Is separate from and different from the background color of the view as it affects the children as well.
- BubbleNotifyChildLayoutChanged: Boolean indicating if parent always should be notified when the child changes layout.
- DisableLayoutUpdate: Boolean indicating if automatic layout updates for this view should be disabled. When disabled the view doesn't call UpdateLayout() when properties such as Width, Height, etc. changes.
- FastMaterial: Faster shader used to render the view when UseFastShader is set to True.
- Height: The height of the view in pixels or percents.
- IgnoreFlip: Used when doing localization override default behavior of flipping the view Right to Left or Left to Rigth.
- IsVisible: Boolean indicating if view is visible or hidden. Invisible views still take up space but aren't interactable and have their alpha set to 0.
- LayoutRoot: Reference to the layout root view that is the main UICanvas that manages layout updates. All UI views resides under a layout root.
- Margin: Adding margins to a view changes the size of the area in which its content resides, but it does not change the width or height of the view.
- Offset: Determines the offset of the view.
- OffsetFromParent: Offset set by a parent view. Used by views like Group to arrange children without changing their own Offset values.
- OverrideHeight: Overrides regular Height value. Used to e.g. automatically size items without changing the default Height value set.
- OverrideWidth: Overrides regular Width value. Used to e.g. automatically size items without changing the default Width value set.
- Pivot: The pivot point of the view.
- Position: Directly sets the local position of the view relative to parent. Position otherwise set using the Alignment and Offset properties.
- RaycastBlockMode: Enum indicating if raycasts should be blocked.
- Rotation: Rotation of the view.
- Scale: Scale of the view.
- UseFastShader: Boolean indicating if the default UI shader should be replaced by a simpler and faster one. The faster shader does not support masking and clipping.
- Width: The width of the view in pixels or percents.
- Id: The identifier of the view.
- Namespace: The namespace the view resides within. 
- Module: The name of the module the view belongs to. If module isn't activated the view isn't processed by the framework.
- HideInDesigner: View is invisible to the designer. 
- IsEditorView: View resides inside the unity editor project.
- TypeName: If the type name of the view should differ from its XML alias, it's specified by this property.
- ContentTemplateTypes: Name of views that serve as content templates to this view.
- HasContentTemplates: Boolean indicating if this view can have content templates defined. 
- BasedOn: Name of the view this view is based on.
- LoadMode: Enum flags indicating when and how the view should be loaded by the framework. Can be changed when e.g. the view is to be loaded on-demand.
- Style: Name of the style that should be applied to the view. 
- IsLocked: Indicates if view can be edited in the designer. 

View: Base class for views.
- Id: The identifier of the view.
- Namespace: The namespace the view resides within. 
- Module: The name of the module the view belongs to. If module isn't activated the view isn't processed by the framework.
- HideInDesigner: View is invisible to the designer. 
- IsEditorView: View resides inside the unity editor project.
- TypeName: If the type name of the view should differ from its XML alias, it's specified by this property.
- ContentTemplateTypes: Name of views that serve as content templates to this view.
- HasContentTemplates: Boolean indicating if this view can have content templates defined. 
- BasedOn: Name of the view this view is based on.
- LoadMode: Enum flags indicating when and how the view should be loaded by the framework. Can be changed when e.g. the view is to be loaded on-demand.
- StateAnimations: Id of state animators activated when transitioning between different view states.

ViewSwitcher: Provides logic for switching between mutliple child views and displaying one at a time. By default the views are loaded when they are displayed, behavior can be changed through the SwitchMode property. 
- ChildLoadMode: Sets the default LoadMode flag on children. Some flags may be overriden depending on the SwitchMode setting.
- ShowFirstByDefault: Boolean indicating if the first view in the view switcher should be displayed initially by default.
- StartView: Sets the ID of the view that should be displayed initially.
- SwitchMode: Enum indicating view switch mode, e.g. if views should be loaded on-demand or be pre-loaded.

XmlEditor: Editor for changing view XML during runtime, part of the designer. 
- AutoCompleteOptions: Contains a list of options presented when auto-complete is activated.
- DesignerViews: Contains the list of all views.
- Edit: Action called when the user edits the view.
- IsFocused: Boolean indicating if the editor is focused.
- IsReadOnly: Boolean indicating if the editor is in read-only mode.
- SelectedAutoCompleteOption: The currently selected auto-complete option.
- XmlText: Used to set the XML text in the editor.

